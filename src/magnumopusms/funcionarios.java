/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package magnumopusms;

/**
 *
 * @author A100519
 */
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.*;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import static magnumopusms.mainform.idUser;
import static magnumopusms.mainform.userAtual;
public class funcionarios extends javax.swing.JFrame {
Connection con = null;
    /**
     * Creates new form funcionarios
     */
    public funcionarios() {
        initComponents();
        show_func();
        con=dbConnection.getConnection();
    }
    public ArrayList<Func> funcList(){
        ArrayList<Func> funcsList = new ArrayList<>();
        PreparedStatement ps;
        ResultSet rs;
        String query="SELECT * FROM login WHERE tipo_user = 'user'";
        try{
            ps = dbConnection.getConnection().prepareStatement(query);
            rs = ps.executeQuery();
            Func func;
            while(rs.next()){
                func= new Func(rs.getInt("id"), rs.getString("nome_func"), rs.getString("username"), rs.getString("password"));
                funcsList.add(func);
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }
        return funcsList;
    }
    public void show_func(){
        ArrayList<Func> list = funcList();
        DefaultTableModel model = (DefaultTableModel)tableFuncs.getModel();
        Object[] row = new Object[4];
        for(int i=0; i<list.size();i++){
            row[0]=list.get(i).getId();
            row[1]=list.get(i).getNome_func();
            row[2]=list.get(i).getUsername();
            row[3]=list.get(i).getPassword();
           
            model.addRow(row);
        }
    }
    public void executeSQLQuery(String query, String message){
        Connection con = dbConnection.getConnection();
        Statement st;
        try{
            st = con.createStatement();
            if(st.executeUpdate(query) == 1){
                JOptionPane.showMessageDialog(null, "Dados "+message+" com sucesso");
            }else{
                JOptionPane.showMessageDialog(null, "Dados nÃ£o "+message);
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    public void search (String str){
        DefaultTableModel model = (DefaultTableModel) tableFuncs.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
        tableFuncs.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter("(?i)" + str));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        buttonExit = new javax.swing.JButton();
        labelMOpus = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        buttonAdd = new javax.swing.JButton();
        buttonBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableFuncs = new javax.swing.JTable();
        labelMOpus1 = new javax.swing.JLabel();
        fieldId = new javax.swing.JTextField();
        labelUsername = new javax.swing.JLabel();
        fieldUsername = new javax.swing.JTextField();
        labelPassword = new javax.swing.JLabel();
        labelNome = new javax.swing.JLabel();
        buttonUpdate = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        fieldNomeFunc = new javax.swing.JTextField();
        labelID = new javax.swing.JLabel();
        fieldProcurar = new javax.swing.JTextField();
        fieldPassword = new javax.swing.JPasswordField();
        labelPassword1 = new javax.swing.JLabel();
        fieldPassword1 = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        backgroundPanel.setBackground(new java.awt.Color(106, 49, 127));

        buttonExit.setBackground(new java.awt.Color(255, 204, 102));
        buttonExit.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        buttonExit.setText("X");
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });

        labelMOpus.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        labelMOpus.setForeground(new java.awt.Color(255, 255, 255));
        labelMOpus.setText("Magnum Opus");

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));

        buttonAdd.setBackground(new java.awt.Color(255, 204, 102));
        buttonAdd.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        buttonAdd.setText("ADICIONAR");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonBack.setBackground(new java.awt.Color(255, 204, 102));
        buttonBack.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        buttonBack.setText("VOLTAR");
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        tableFuncs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Username"
            }
        ));
        tableFuncs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableFuncsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableFuncs);

        labelMOpus1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        labelMOpus1.setText("Funcionarios");

        fieldId.setEditable(false);
        fieldId.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N

        labelUsername.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        labelUsername.setText("Username");

        fieldUsername.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        fieldUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldUsernameActionPerformed(evt);
            }
        });

        labelPassword.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        labelPassword.setText("Password");

        labelNome.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        labelNome.setText("Nome");

        buttonUpdate.setBackground(new java.awt.Color(255, 204, 102));
        buttonUpdate.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        buttonUpdate.setText("ATUALIZAR");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        buttonDelete.setBackground(new java.awt.Color(255, 204, 102));
        buttonDelete.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        buttonDelete.setText("ELIMINAR");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        fieldNomeFunc.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N

        labelID.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        labelID.setText("ID");

        fieldProcurar.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        fieldProcurar.setText("Pesquisar...");
        fieldProcurar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldProcurarKeyReleased(evt);
            }
        });

        labelPassword1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        labelPassword1.setText("Confirmar Password");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(buttonBack))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(mainPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(labelMOpus1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fieldProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(mainPanelLayout.createSequentialGroup()
                                    .addGap(45, 45, 45)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labelPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelNome)
                                    .addComponent(labelID))
                                .addGap(18, 18, 18)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fieldNomeFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fieldId, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(labelPassword1)
                                .addGap(18, 18, 18)
                                .addComponent(fieldPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(36, 36, 36)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldNomeFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNome, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(fieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelMOpus1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonBack))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelMOpus)
                .addGap(179, 179, 179)
                .addComponent(buttonExit)
                .addContainerGap())
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelMOpus)
                    .addComponent(buttonExit))
                .addGap(24, 24, 24)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_buttonExitActionPerformed

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        PreparedStatement ps;
        ResultSet rs;
        String query = "SELECT * FROM login WHERE id = ?";
        
        try{
            ps= dbConnection.getConnection().prepareStatement(query);
            
            ps.setInt(1, idUser);
            
            rs = ps.executeQuery();
            if(rs.next()){
                userAtual = (rs.getString("nome_func"));
                mainform mainform = new mainform();
                mainform.setVisible(true);
                mainform.pack();
                mainform.setLocationRelativeTo(null);
                mainform.welcomeLabel.setText("Bem-vindo, " +userAtual);
                this.dispose();
            }
        }catch(Exception e){}
        
          
    }//GEN-LAST:event_buttonBackActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        String pass = String.valueOf(fieldPassword.getPassword());
        String conpass = String.valueOf(fieldPassword1.getPassword());
        final String regex = "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$";
        final Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);
        final Matcher matcher = pattern.matcher(pass);
        try{
        String encryptedpass = "";
        MessageDigest m = MessageDigest.getInstance("MD5");
        m.update(pass.getBytes());
        byte[] bytes = m.digest();
         StringBuilder s = new StringBuilder();  
            for(int x=0; x< bytes.length ;x++)  
            {  
                s.append(Integer.toString((bytes[x] & 0xff) + 0x100, 16).substring(1));  
            }   
            encryptedpass = s.toString();
        if (conpass.equals(pass) && matcher.find()){
        String query = "INSERT INTO login (nome_func, username, password) VALUES ('"+fieldNomeFunc.getText()+"','"+fieldUsername.getText()+"','"+fieldPassword.getText()+"')";
        
        executeSQLQuery(query, "inseridos");
        DefaultTableModel model = (DefaultTableModel) tableFuncs.getModel();
        int rowCount = model.getRowCount();
        for (int i = rowCount -1; i >= 0; i--){
            model.removeRow(i);
        }
        show_func();
        } else {
            if (!conpass.equals(pass)){
            JOptionPane.showMessageDialog(null, "A password inserida nÃ£o estÃ¡ igual nos dois campos!", "Erro: confirmaÃ§Ã£o de password!", 2);
        } else {
            if (!(matcher.find())){
                    JOptionPane.showMessageDialog(null, "A password inserida nÃ£o cumpre os critÃ©rios! \n\n A password deve conter, pelo menos: \n * 8 caracteres \n * 1 nÃºmero \n * 1 letra maiÃºscula \n * 1 caracter especial", "Erro: critÃ©rios de password", 2);
            }}}}catch(NoSuchAlgorithmException e){
                e.printStackTrace();
            }
        
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
         int i = tableFuncs.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tableFuncs.getModel();
        String id = model.getValueAt(i,0).toString();
        String pass = String.valueOf(fieldPassword.getPassword());
        String conpass = String.valueOf(fieldPassword1.getPassword());
        final String regex = "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{12,}$";
        final Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);
        final Matcher matcher = pattern.matcher(pass);
        try{
        String encryptedpass = "";
        MessageDigest m = MessageDigest.getInstance("MD5");
        m.update(pass.getBytes());
        byte[] bytes = m.digest();
         StringBuilder s = new StringBuilder();  
            for(int x=0; x< bytes.length ;x++)  
            {  
                s.append(Integer.toString((bytes[x] & 0xff) + 0x100, 16).substring(1));  
            }   
            encryptedpass = s.toString();
        if (conpass.equals(pass) && matcher.find()){
        String query = "UPDATE `login` SET `nome_func`= '"+fieldNomeFunc.getText()+"',`username`='"+fieldUsername.getText()+"',`password`='"+encryptedpass+"' WHERE id = '"+id+"'";
        
        executeSQLQuery(query, "atualizados");
        int rowCount = model.getRowCount();
        for (i = rowCount -1; i >= 0; i--){
            model.removeRow(i);
        }
        show_func();
        } else {
            if (!conpass.equals(pass)){
            JOptionPane.showMessageDialog(null, "A password inserida nÃ£o estÃ¡ igual nos dois campos!", "Erro: confirmaÃ§Ã£o de password!", 2);
        } else{
            if (!(matcher.find())){
                    JOptionPane.showMessageDialog(null, "A password inserida nÃ£o cumpre os critÃ©rios! \n\n A password deve conter, pelo menos: \n * 8 caracteres \n * 1 nÃºmero \n * 1 letra maiÃºscula \n * 1 caracter especial", "Erro: critÃ©rios de password", 2);
                }}}}catch(NoSuchAlgorithmException e){
                    e.printStackTrace();
                }
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        int i = tableFuncs.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tableFuncs.getModel();
        String id = model.getValueAt(i,0).toString(); 
        
        int input = JOptionPane.showConfirmDialog(null, "Tem a certeza que pretende eliminar este utilizador?", "ConfirmaÃ§Ã£o", JOptionPane.YES_NO_OPTION);
        
        if (input == 0) {
        String query = "DELETE FROM login WHERE id = '"+id+"'";
        
        executeSQLQuery(query, "apagados");
        int rowCount = model.getRowCount();
        for (i = rowCount -1; i >= 0; i--){
            model.removeRow(i);
        }
        show_func();
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void tableFuncsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableFuncsMouseClicked
        int i = tableFuncs.getSelectedRow();
        TableModel model = tableFuncs.getModel();
        fieldId.setText(model.getValueAt(i,0).toString());
        fieldNomeFunc.setText(model.getValueAt(i,1).toString());
        fieldUsername.setText(model.getValueAt(i,2).toString());

    }//GEN-LAST:event_tableFuncsMouseClicked

    private void fieldUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldUsernameActionPerformed

    private void fieldProcurarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldProcurarKeyReleased
        String searchString = fieldProcurar.getText();
        search(searchString);
    }//GEN-LAST:event_fieldProcurarKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(funcionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(funcionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(funcionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(funcionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new funcionarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JTextField fieldId;
    private javax.swing.JTextField fieldNomeFunc;
    private javax.swing.JPasswordField fieldPassword;
    private javax.swing.JPasswordField fieldPassword1;
    private javax.swing.JTextField fieldProcurar;
    private static javax.swing.JTextField fieldUsername;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelID;
    private javax.swing.JLabel labelMOpus;
    private javax.swing.JLabel labelMOpus1;
    private javax.swing.JLabel labelNome;
    private javax.swing.JLabel labelPassword;
    private javax.swing.JLabel labelPassword1;
    private javax.swing.JLabel labelUsername;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTable tableFuncs;
    // End of variables declaration//GEN-END:variables
}
